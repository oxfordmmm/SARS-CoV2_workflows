// Global default params, used in configs
params {
  refURL = 'https://raw.githubusercontent.com/iqbal-lab-org/viridian_workflow/v0.3.0/viridian_workflow/amplicon_scheme_data/MN908947.fasta'

  // primers
  primers='auto'
  //primers = 'https://raw.githubusercontent.com/iqbal-lab-org/viridian_workflow/master/data/covid-artic-v3.json'
  bedURL = 'https://raw.githubusercontent.com/artic-network/artic-ncov2019/master/primer_schemes/nCoV-2019/V3/nCoV-2019.bed'
  limitMaxSampleSize = true
  maxReadsIll = 4000000
  maxReadsONT = 120000

  //other
  uploadBucket=false
  prefix=params.seq_tech
  bucketNameFN4 = 'FN4-queue'

  // parallel processing operation limit
  myQueueSize = 100000

  // number of maximum retries for errored processes
  myMaxRetries = 1

  // total number of error allowed per job 
  myMaxErrors = 1000

  // process fork limit
  myMaxForks = false

  // execution UUID
  run_uuid = 'no_uuid'
}


profiles {
    singularity {
        report {
	        enabled = true
        }
        timeline {
            enabled = true
        }
        dag {
            enabled = true
        }
        trace {
            enabled = true
        }
        singularity.autoMounts = true

        process {
            scratch = true
	        errorStrategy = 'ignore'

            withLabel:oci_pipe {
                time = '30m'
                singularity.enabled = true
                container = '/data/images/oci_pipeline_v0.2.77.sif'
            }
            withLabel:pango {
                time = '5m'
                singularity.enabled = true
                container = '/data/images/pango_v0.2.77.sif'
            }
            withLabel:nextclade {
                time = '1h'
                singularity.enabled = true
                container = '/data/images/nextclade_v0.2.77.sif'
            }
            withLabel:aln2type {
                time = '1h'
                singularity.enabled = true
                container = '/data/images/aln2type_v0.2.77.sif'
            }
            withLabel:viridian {
                time = '45m'
                singularity.enabled = true
                container = '/data/images/viridian_workflow_v0.3.7.img'
            }
            withLabel:fn4 {
                time = '1h'
                singularity.enabled = true
                container = '/data/images/fn4_upload_v0.2.77.sif'
            }
            withLabel:sars_cov2_workflows {
                time = '1h'
                singularity.enabled = true
                container = "/data/images/sars-cov2_workflows_v0.2.77.sif"
            }
            withLabel:bcftools {
                time = '1h'
                singularity.enabled = true
                container = "/data/images/bcftools_v0.2.77.sif"
            }
        }
    }

    oke {
        k8s {
            namespace = 'default'
            storageClaimName = 'default-nextflow-fss-storage-work-pvc'
            storageMountPath = '/work'
            launchDir = "/work/runs/${params.run_uuid}"

            serviceAccount = 'default'
            projectDir = '/work/project'
            pod = [
                [label: 'pod-type', value: 'nextflow-worker'],
                [volumeClaim: 'default-nextflow-fss-storage-data-pvc', mountPath: '/data'],
                [imagePullSecret: 'sp3dockersecret'],
                [imagePullPolicy: 'IfNotPresent']
            ]
        }
        report {
            enabled = true
        }
        timeline {
            enabled = true
        }
        dag {
            enabled = true
        }
        trace {
            enabled = true
        }

        process {
            executor = 'k8s'
            scratch = true
            maxRetries = params.myMaxRetries
            // Exponential backoff: 2s, 4s, 8s, 16s, 32s, and 1min thereafter.
            errorStrategy = {
                sleep(Math.min(60, Math.pow(2, task.attempt)) as long)
                task.attempt<=params.myMaxRetries ? 'retry' : 'ignore'
            }
            maxErrors = params.myMaxErrors
            if (params.myMaxForks) {
                maxForks = params.myMaxForks
            }

            container = 'lhr.ocir.io/lrbvkel2wjot/oxfordmmm/nf-head-pod:0c8df09c8e58'

            withLabel:oci_pipe {
                time = '30m'
                container = 'lhr.ocir.io/lrbvkel2wjot/oxfordmmm/oci_pipeline:v0.2.77'
            }
            withLabel:pango {
                time = '5m'
                container = 'lhr.ocir.io/lrbvkel2wjot/oxfordmmm/pango:v0.2.77'
            }
            withLabel:nextclade {
                time = '1h'
                container = 'lhr.ocir.io/lrbvkel2wjot/nextclade:2.9.1'
            }
            withLabel:aln2type {
                time = '1h'
                container = 'lhr.ocir.io/lrbvkel2wjot/oxfordmmm/aln2type:v0.2.77'
            }
            withLabel:viridian {
                time = '45m'
                container = 'lhr.ocir.io/lrbvkel2wjot/viridian_workflow:v0.3.7'
            }
            withLabel:fn4 {
                time = '1h'
                container = 'lhr.ocir.io/lrbvkel2wjot/oxfordmmm/fn4_upload:v0.2.77'
            }
            withLabel:sars_cov2_workflows {
                time = '1h'
                container = 'lhr.ocir.io/lrbvkel2wjot/oxfordmmm/sars-cov2_workflows:v0.2.77'
            }
            withLabel:bcftools {
                time = '1h'
                container = 'lhr.ocir.io/lrbvkel2wjot/oxfordmmm/bcftools:v0.2.77'
            }
        }
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
  author = 'Nicholas Sanderson'
  description = 'SARS-CoV2 worfklows for GPAS'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = 'sp3env-v0.2.77'
}

